version: 2.1

jobs:
  # Deploy the EKS infrastructure. There is only one cluster.
  # If there are changes in the cloudformation.yaml the changes will be deployed here
  # If there are no changes -> cloudformation just does nothing
  # The kubeconfig file for kubectl is also extraced here and passed to the other stages
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # tar for workspace
            yum install -y tar gzip
            # Kubectl
            cat \<<EOF > /etc/yum.repos.d/kubernetes.repo
            [kubernetes]
            name=Kubernetes
            baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
            enabled=1
            gpgcheck=1
            repo_gpgcheck=1
            gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
            EOF
            yum install -y kubectl

            # aws-iam-authenticator
            curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator
            chmod +x ./aws-iam-authenticator
            mv ./aws-iam-authenticator /usr/local/bin
      - run:
          name: Deploy EKS
          command: |
            set -x
            # Deploy changes to the EKS
            aws cloudformation deploy --stack-name capstone --template-file infrastructure/cloudformation.yaml --capabilities CAPABILITY_IAM
            # Get the kubeconfig file for the EKS cluster. It is saved unter ~/.kube/config
            aws eks update-kubeconfig --name capstone-cluster
      - persist_to_workspace:
          root: ~/
          paths:
            # Save kubeconfig for the other jobs
            - .kube
  
  # The job build a docker image based on nginx but replaces the index.html
  # The index.html contains the ${CIRCLE_WORKFLOW_ID} variable so you can see that the deployment was successfull
  # The pushed image has a tag like "philippmt/capstone:${CIRCLE_WORKFLOW_ID}"
  # So there is a tag/image for each run
  build-docker-image:
    machine: true
    steps:
      - checkout
      - run:
          name: Lint docker image
          command: |
            wget -O ./hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            chmod +x ./hadolint
            ./hadolint docker/Dockerfile
      - run:
          name: Login to dockerhub
          command: echo "$DOCKER_PASSWORD" | docker login --username $DOCKER_USER --password-stdin
      - run:
          name: Build index.html with CIRCLE_WORKFLOW_ID
          command: |
            cd docker
            sudo apt update
            sudo apt install -y gettext-base
            # Use envsubst to replace ${CIRCLE_WORKFLOW_ID} with the value in index.html
            envsubst < index.html.tpl > index.html
            echo "------------------------------------------------------"
            cat index.html
            echo "------------------------------------------------------"
      - run:
          name: Build docker image
          command: |
            cd docker
            docker build -t philippmt/capstone:${CIRCLE_WORKFLOW_ID} .
      - run:
          name: Push docker image
          command: docker push philippmt/capstone:${CIRCLE_WORKFLOW_ID}
  
  # This job deployes the service.yaml and deployment.yaml
  # The deployment.yaml has an placeholder for the ${CIRCLE_WORKFLOW_ID} in the image-tag
  # The value is replaced before deployment
  # The rolling-deployment starts a new pod with the new image and on√∂y shuts the old one down
  # when the new pod was starting successfully
  deploy:
    docker:
      - image: alpine/k8s:1.21.2
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: apk add gettext
      - run:
          name: Do deployment
          command: |
            cd deployment/
            # Check if there are errors in the service.yaml first
            kubectl apply -f service.yaml --dry-run=server
            kubectl apply -f service.yaml

            # Check if there are errors in the deployment.yaml first
            envsubst < deployment.yaml > deployment-rendered.yaml
            kubectl apply -f deployment-rendered.yaml --dry-run=server
            kubectl apply -f deployment-rendered.yaml
  
  # The test stage first waits for the rolling-deployment to finish or to timeout
  # If it was successfull a smoke-test happens that checks if nginx is serving the correct ${CIRCLE_WORKFLOW_ID} in its index.html
  # If the rollout fails or the smoke-test fails, the rollout is undone with in the last run
  # So the previously sucessfully deployed working version is present again
  smoke-test:
    docker:
      - image: alpine/k8s:1.21.2
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Wait for rollout to completed
          # Wait max. 30s for timeout -  this is enough for this project
          command: kubectl rollout status deployment/nginx-deployment --timeout 30s
      - run:
          name: Execute smoke-test
          # Check if the index.html contains the corrent ${CIRCLE_WORKFLOW_ID}
          command: curl -v 18.158.72.108:30007 | grep ${CIRCLE_WORKFLOW_ID}
      - run:
          name: Rollback changes
          when: on_fail
          command: 
            kubectl rollout undo deployment/nginx-deployment

workflows:
  welcome:
    jobs:
      - deploy-infrastructure
      - build-docker-image:
          requires: [deploy-infrastructure]
      - deploy:
          requires: [build-docker-image]
      - smoke-test:
          requires: [deploy]
