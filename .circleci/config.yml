# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
  # Declare a dependency on the welcome-orb
  welcome: circleci/welcome-orb@0.4.1

jobs:
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # tar for workspace
            yum install -y tar gzip
            # Kubectl
            cat \<<EOF > /etc/yum.repos.d/kubernetes.repo
            [kubernetes]
            name=Kubernetes
            baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
            enabled=1
            gpgcheck=1
            repo_gpgcheck=1
            gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
            EOF
            yum install -y kubectl

            # aws-iam-authenticator
            curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator
            chmod +x ./aws-iam-authenticator
            mv ./aws-iam-authenticator /usr/local/bin
      - run:
          name: Deploy EKS
          command: |
            set -x
            aws cloudformation deploy --stack-name capstone --template-file infrastructure/cloudformation.yaml --capabilities CAPABILITY_IAM
            aws eks update-kubeconfig --name capstone-cluster
      - persist_to_workspace:
          root: ~/
          paths:
            - .kube
  
  build-docker-image:
    machine: true
    steps:
      - checkout
      - run:
          name: Lint docker image
          command: |
            wget -O ./hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            chmod +x ./hadolint
            ./hadolint docker/Dockerfile
      - run:
          name: Login to dockerhub
          command: echo "$DOCKER_PASSWORD" | docker login --username $DOCKER_USER --password-stdin
      - run:
          name: Build index.html with CIRCLE_WORKFLOW_ID
          command: |
            cd docker
            sudo apt update
            sudo apt install -y gettext-base
            envsubst < index.html.tpl > index.html
            echo "------------------------------------------------------"
            cat index.html
            echo "------------------------------------------------------"
      - run:
          name: Build docker image
          command: |
            cd docker
            docker build -t philippmt/capstone:${CIRCLE_WORKFLOW_ID} .
      - run:
          name: Push docker image
          command: docker push philippmt/capstone:${CIRCLE_WORKFLOW_ID}
  
  deploy:
    docker:
      - image: alpine/k8s:1.21.2
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: apk add gettext
      - run:
          name: Do deployment
          command: |
            cd deployment/
            # Check if there are errors in the service.yaml first
            kubectl apply -f service.yaml --dry-run=server
            kubectl apply -f service.yaml

            # Check if there are errors in the deployment.yaml first
            envsubst < deployment.yaml > deployment-rendered.yaml
            kubectl apply -f deployment-rendered.yaml --dry-run=server
            kubectl apply -f deployment-rendered.yaml

            # Wait for nginx deployment to finish
            # Catch exit code if this fails
            kubectl rollout status deployment/nginx-deployment || export exit_code=$?

            echo "Deployment ExitCode: $exit_code"

            #######################################################
            #
            # Only undo rollout if "rollout status..." failed because
            # if the previous steps fail the deployment is not done ye
            # and a older working version would be rolled back
            #
            #######################################################
            if [[ ! -z $exit_code && $exit_code != 0 ]]; then
              kubectl rollout undo deployment/nginx-deployment
            fi
  
  smoke-test:
    docker:
      - image: alpine/k8s:1.21.2
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Execute test
          command: curl -v 18.158.72.108:30007 | grep ${CIRCLE_WORKFLOW_ID}
      - run:
          name: Rollback changes
          when: on_fail
          command: 
            kubectl rollout undo deployment/nginx-deployment

# Orchestrate or schedule a set of jobs
workflows:
  # Name the workflow "welcome"
  welcome:
    # Run the welcome/run job in its own container
    jobs:
      - welcome/run
      - deploy-infrastructure
      - build-docker-image:
          requires: [deploy-infrastructure]
      - deploy:
          requires: [build-docker-image]
      - smoke-test:
          requires: [deploy]
